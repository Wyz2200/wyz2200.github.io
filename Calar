<!doctype html>
<html lang="zh-Hant">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>輸贏紀錄器</title>
<style>
  :root { --gap: 10px; }
  body {
    font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Noto Sans TC", sans-serif;
    margin: 20px; background:#f6f7fb; color:#222;
  }
  .wrap { max-width: 420px; margin: 0 auto; }
  h1 { font-size: 20px; font-weight: 700; margin: 0 0 8px; }
  .balance {
    background:#fff; border-radius:12px; padding:16px;
    display:flex; align-items:baseline; justify-content:space-between;
    box-shadow: 0 2px 8px rgba(0,0,0,.05);
  }
  .balance .label { color:#666; font-size:14px; }
  .balance .value { font-size:28px; font-weight:800; letter-spacing:.5px; }
  .controls { display:flex; gap: var(--gap); margin: 12px 0 16px; }
  .controls input {
    flex:1; font-size:18px; padding:10px 12px; border:1px solid #ddd; border-radius:10px; background:#fff;
  }
  .controls button {
    padding:10px 12px; border:none; border-radius:10px; background:#eee; cursor:pointer; font-weight:600;
  }
  .controls button:hover { filter: brightness(0.98); }
  .pad {
    display:grid; grid-template-columns: repeat(3, 1fr); gap: var(--gap);
  }
  .key {
    background:#fff; border:1px solid #e5e7eb; border-radius:12px;
    padding:16px 0; font-size:22px; font-weight:700; text-align:center; cursor:pointer;
    user-select:none; box-shadow: 0 1px 4px rgba(0,0,0,.04);
    transition: transform .02s ease-in;
  }
  .key:active { transform: scale(.98); }
  .key.action-win { background:#eefdf2; border-color:#c8f1d6; }
  .key.action-lose { background:#fff1f1; border-color:#ffd3d3; }
  .mode-indicator {
    margin: 10px 0 2px; font-size:12px; color:#666;
  }
  .mode-indicator strong { padding:2px 6px; border-radius:6px; }
  .mode-win strong { background:#e8f9ef; color:#0a7a3f; }
  .mode-lose strong { background:#ffecec; color:#b11212; }
  .section {
    margin-top: 18px; background:#fff; border:1px solid #e5e7eb; border-radius:12px; padding:12px;
    box-shadow: 0 2px 8px rgba(0,0,0,.04);
  }
  .section h2 { font-size:16px; margin:0 0 10px; }
  .history { max-height: 280px; overflow:auto; }
  .row {
    display:grid; grid-template-columns: 86px 1fr 110px; gap:8px; padding:8px 0; border-bottom:1px dashed #eee;
    font-size:14px; align-items:center;
  }
  .row:last-child { border-bottom:none; }
  .amt.plus { color:#0a7a3f; font-weight:700; }
  .amt.minus { color:#b11212; font-weight:700; }
  .muted { color:#888; font-size:12px; }
  .toolbar { display:flex; gap:8px; justify-content:flex-end; margin-top:10px; }
  .toolbar button {
    border:none; background:#f0f3f7; padding:8px 10px; border-radius:8px; cursor:pointer; font-size:12px;
  }
  .toolbar button:hover { filter: brightness(0.97); }
</style>
</head>
<body>
  <div class="wrap">
    <h1>輸贏紀錄器</h1>

    <div class="balance" id="balanceBox" aria-live="polite">
      <div class="label">剩餘金幣</div>
      <div class="value" id="balance">0</div>
    </div>

    <div class="controls">
      <input id="startInput" type="number" inputmode="numeric" placeholder="設定初始金幣（可選）" />
      <button id="applyStart">設定</button>
      <button id="resetAll" title="清空金額與歷史">重設</button>
    </div>

    <div class="mode-indicator" id="modeText">目前模式：<strong>未選擇</strong></div>

    <div class="pad" id="pad">
      <!-- 1 2 3 -->
      <div class="key" data-key="1">1</div>
      <div class="key" data-key="2">2</div>
      <div class="key" data-key="3">3</div>
      <!-- 4 5 6 -->
      <div class="key" data-key="4">4</div>
      <div class="key" data-key="5">5</div>
      <div class="key" data-key="6">6</div>
      <!-- 7 8 9 -->
      <div class="key" data-key="7">7</div>
      <div class="key" data-key="8">8</div>
      <div class="key" data-key="9">9</div>
      <!-- 贏 0 輸 -->
      <div class="key action-win" data-action="win">贏</div>
      <div class="key" data-key="0">0</div>
      <div class="key action-lose" data-action="lose">輸</div>
    </div>

    <div class="section">
      <h2>本次金額：<span id="currentInput">0</span></h2>
      <div class="toolbar">
        <button id="backspace">退格</button>
        <button id="clearInput">清零</button>
      </div>
    </div>

    <div class="section">
      <h2>紀錄</h2>
      <div class="history" id="history"></div>
    </div>
  </div>

<script>
(function() {
  const $ = sel => document.querySelector(sel);
  const $$ = sel => Array.from(document.querySelectorAll(sel));

  const balanceEl = $('#balance');
  const modeText = $('#modeText');
  const currentInputEl = $('#currentInput');
  const historyEl = $('#history');

  const startInput = $('#startInput');
  const applyStartBtn = $('#applyStart');
  const resetAllBtn = $('#resetAll');
  const backspaceBtn = $('#backspace');
  const clearInputBtn = $('#clearInput');

  const STORAGE_KEY = 'winloss_recorder_v1';
  let state = loadState();

  /*** state shape
   * { balance: number, buffer: string, mode: 'win'|'lose'|null, history: Array<{t:number, type:'win'|'lose', amount:number, after:number}> }
   ***/

  // ---- init render ----
  renderAll();

  // ---- keypad events ----
  $$('#pad .key').forEach(btn => {
    btn.addEventListener('click', () => {
      const k = btn.dataset.key;
      const action = btn.dataset.action;

      if (k !== undefined && k !== null) {
        appendDigit(k);
      } else if (action === 'win' || action === 'lose') {
        // 如果目前沒有輸入金額，但想先選模式，就只切換模式
        if (!state.buffer || Number(state.buffer) === 0) {
          setMode(action);
        } else {
          // 有輸入金額 -> 直接套用並記錄
          apply(action);
        }
      }
    });
  });

  // ---- control buttons ----
  applyStartBtn.addEventListener('click', () => {
    const v = Number(startInput.value || 0);
    if (!Number.isFinite(v)) return;
    state.balance = Math.trunc(v);
    saveState(); renderAll();
  });

  resetAllBtn.addEventListener('click', () => {
    if (!confirm('確定要清空剩餘金幣與所有紀錄嗎？')) return;
    state = { balance: 0, buffer: '0', mode: null, history: [] };
    saveState(); renderAll();
  });

  backspaceBtn.addEventListener('click', () => {
    if (!state.buffer || state.buffer === '0') return;
    state.buffer = state.buffer.slice(0, -1);
    if (state.buffer.length === 0) state.buffer = '0';
    saveState(); renderInput();
  });

  clearInputBtn.addEventListener('click', () => {
    state.buffer = '0';
    saveState(); renderInput();
  });

  // ---- keyboard support (optional) ----
  window.addEventListener('keydown', (e) => {
    if (e.key >= '0' && e.key <= '9') {
      appendDigit(e.key);
    } else if (e.key === 'Enter') {
      if (Number(state.buffer) > 0) {
        apply(state.mode || 'win'); // 未選模式預設視為「贏」
      }
    } else if (e.key === 'Backspace') {
      backspaceBtn.click();
    } else if (e.key.toLowerCase() === 'w') {
      apply('win');
    } else if (e.key.toLowerCase() === 'l') {
      apply('lose');
    }
  });

  // ---- helpers ----
  function appendDigit(d) {
    if (state.buffer === '0') state.buffer = d;
    else state.buffer += d;
    saveState(); renderInput();
  }

  function setMode(m) {
    state.mode = m;
    saveState(); renderMode();
  }

  function apply(type) {
    const amt = Number(state.buffer || '0');
    if (!amt) return;

    const delta = (type === 'win') ? amt : -amt;
    state.balance += delta;

    state.history.unshift({
      t: Date.now(),
      type,
      amount: amt,
      after: state.balance
    });

    state.buffer = '0';
    state.mode = type; // 保留最後一次模式
    saveState(); renderAll();
  }

  function renderAll() {
    renderBalance();
    renderMode();
    renderInput();
    renderHistory();
  }

  function renderBalance() {
    balanceEl.textContent = formatNumber(state.balance);
  }

  function renderMode() {
    const pad = $('#pad');
    pad.dataset.mode = state.mode || '';
    if (state.mode === 'win') {
      modeText.classList.add('mode-win');
      modeText.classList.remove('mode-lose');
      modeText.innerHTML = '目前模式：<strong>贏（加）</strong>';
    } else if (state.mode === 'lose') {
      modeText.classList.add('mode-lose');
      modeText.classList.remove('mode-win');
      modeText.innerHTML = '目前模式：<strong>輸（減）</strong>';
    } else {
      modeText.classList.remove('mode-win', 'mode-lose');
      modeText.innerHTML = '目前模式：<strong>未選擇</strong>';
    }
  }

  function renderInput() {
    currentInputEl.textContent = formatNumber(Number(state.buffer || 0));
  }

  function renderHistory() {
    historyEl.innerHTML = '';
    if (!state.history.length) {
      historyEl.innerHTML = '<div class="muted">目前尚無紀錄</div>';
      return;
    }
    state.history.forEach(rec => {
      const row = document.createElement('div');
      row.className = 'row';
      const date = new Date(rec.t);
      const hh = String(date.getHours()).padStart(2,'0');
      const mm = String(date.getMinutes()).padStart(2,'0');
      const ss = String(date.getSeconds()).padStart(2,'0');
      const timeStr = `${date.getFullYear()}/${date.getMonth()+1}/${date.getDate()} ${hh}:${mm}:${ss}`;

      const timeCol = document.createElement('div');
      timeCol.innerHTML = `<span class="muted">${timeStr}</span>`;

      const typeCol = document.createElement('div');
      const sign = rec.type === 'win' ? '+' : '-';
      typeCol.innerHTML = `<span class="amt ${rec.type==='win'?'plus':'minus'}">${sign}${formatNumber(rec.amount)}</span>`;

      const afterCol = document.createElement('div');
      afterCol.innerHTML = `<span class="muted">剩餘：${formatNumber(rec.after)}</span>`;

      row.appendChild(timeCol);
      row.appendChild(typeCol);
      row.appendChild(afterCol);
      historyEl.appendChild(row);
    });
  }

  function formatNumber(n) {
    return Number(n).toLocaleString('zh-Hant-TW');
  }

  function loadState() {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (!raw) return { balance: 0, buffer: '0', mode: null, history: [] };
      const s = JSON.parse(raw);
      // 基本防呆
      return {
        balance: Number(s.balance) || 0,
        buffer: typeof s.buffer === 'string' ? s.buffer : '0',
        mode: (s.mode === 'win' || s.mode === 'lose') ? s.mode : null,
        history: Array.isArray(s.history) ? s.history : []
      };
    } catch {
      return { balance: 0, buffer: '0', mode: null, history: [] };
    }
  }

  function saveState() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
  }
})();
</script>
</body>
</html>
